var autoBits=function(c){if(this instanceof autoBits){var d={bits:0,map:[],debug:false};var c=$.extend({},d,c);this.isSet=function(a){if(c.map.indexOf(a)<0){f('isSet: '+a+' not found in map');return this}else{binaryVal=e(c.map.indexOf(a));return(binaryVal&c.bits)>0}};this.getBooleans=function(a){var b=new Array;for(i=0;i<c.map.length;i++){e(i)&c.bits?b.push(true):b.push(false)}return b};this.getBits=function(a){f('bits: '+c.bits);return c.bits};this.addBit=function(a){if(c.map.indexOf(a)<0){f('addBits: '+a+' not found in map');return this}else{binaryVal=e(c.map.indexOf(a));if((binaryVal&c.bits)>0){f('addBits: '+a+' bit exists already in map. '+c.bits);return this}else{c.bits+=binaryVal;f('addBits: '+binaryVal+' set');return c.bits}}};this.removeBit=function(a){if(c.map.indexOf(a)<0){f('removeBits: '+a+' not found in map');return this}else{binaryVal=e(c.map.indexOf(a));if(!(binaryVal&c.bits)){f('removeBits: '+a+' bit doesn\'t exist in map. '+c.bits);return this}else{c.bits-=binaryVal;f('removeBits: '+binaryVal+' removed');return c.bits}}};this.randomize=function(){f('randomize: '+c.bits);return c.bits};this.clear=function(a){c.bits=0;return c.bits};var e=function(a){return Math.pow(2,a)};var f=function(){if(c.debug&&window.console&&window.console.log)window.console.log('[jquery.autobits] '+Array.prototype.join.call(arguments,''))}}else{return new autoBits(c)}};